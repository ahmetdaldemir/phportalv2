name: Deploy to Production

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  deploy:
    name: 🚀 Deploy to irepair.com.tr
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🔧 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, redis, soap
          coverage: none

      - name: 📦 Install Composer Dependencies
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
          composer dump-autoload --optimize

      - name: 🔑 Create .env file
        run: |
          echo "APP_NAME=PHPPortal" >> .env
          echo "APP_ENV=production" >> .env
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "APP_DEBUG=false" >> .env
          echo "APP_URL=https://irepair.com.tr" >> .env
          echo "" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "REDIS_PORT=6379" >> .env

      - name: 🎨 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install NPM Dependencies
        run: |
          npm ci
          npm run production

      - name: 🗜️ Optimize Laravel
        run: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      - name: 📂 Prepare Deployment Files
        run: |
          # Remove unnecessary files
          rm -rf tests/
          rm -rf database/migrations/backup/
          rm -rf .git/
          rm -f .gitignore .gitattributes
          rm -f phpunit.xml
          rm -f generate-migrations-from-sql.php
          rm -f generate-migrations.sh
          rm -f generate-migrations.ps1
          rm -f *.md
          
          # Create deployment archive
          tar -czf deployment.tar.gz \
            --exclude='node_modules' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            .

      - name: 📤 Deploy to FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./
          server-dir: /public_html/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/tests/**
            **/.env.example
            **/phpunit.xml
            **/README.md
            **/*.md
            **/storage/logs/**
            **/storage/framework/cache/**
            **/storage/framework/sessions/**
            **/storage/framework/views/**

      - name: 🔄 Run Post-Deployment Commands via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/u529018053/public_html
            
            # Set permissions
            chmod -R 755 storage bootstrap/cache
            chown -R u529018053:u529018053 storage bootstrap/cache
            
            # Run migrations (if needed)
            # php artisan migrate --force
            
            # Clear and cache config
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
            php artisan route:clear
            
            # Optimize for production
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            
            # Restart queue workers (if using)
            php artisan queue:restart
            
            echo "✅ Deployment completed successfully!"

      - name: 📢 Deployment Notification
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment başarılı!"
            echo "🌐 URL: https://irepair.com.tr"
          else
            echo "❌ Deployment başarısız!"
          fi

